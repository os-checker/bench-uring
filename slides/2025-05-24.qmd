---
title: "io-uring 异步运行时基准测试"
format: revealjs
editor: visual
---

```{r}
source("./rscripts/setup.R")
```

```{r}
# Prepare
data <- read.csv("2025-05-24.csv")
data$server_st <- data$server_st == "true"
data$client_st <- data$client_st == "true"
```

## System Information

```bash
System Version: Ubuntu 24.04.1 LTS

Kernel Version: 6.8.0-1029-aws

Architecture:             aarch64
  CPU op-mode(s):         32-bit, 64-bit
CPU(s):                   32
Vendor ID:                ARM
  Model name:             Neoverse-N1
    Thread(s) per core:   1
    Core(s) per socket:   32
    Socket(s):            1
Caches (sum of all):
  L1d:                    2 MiB (32 instances)
  L1i:                    2 MiB (32 instances)
  L2:                     32 MiB (32 instances)
  L3:                     32 MiB (1 instance)
```

## Duration doesn't matter

```{r duration-comparison, dev = "svg"}
filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 16384)

bytes <- human_readable_bytes(16384)

title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p1 <- p

filtered_data <- data %>%
  filter(duration == 4, socket_len == 100, size == 16384)

title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 4s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p2 <- p

grid.arrange(p1, p2, ncol = 1)
```

## Amount of client sockets neither

```{r socket_len-comparison, dev = "svg"}
filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 16384)

bytes <- human_readable_bytes(16384)

title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p1 <- p

filtered_data <- data %>%
  filter(duration == 30, socket_len == 200, size == 16384)

title <- str_interp(
  "MBps by Server with 200 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p2 <- p

grid.arrange(p1, p2, ncol = 1)
```

## Size of transmitted data matters

```{r size-comparison, dev = "svg"}
filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 16384)

bytes <- human_readable_bytes(16384)
title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p1 <- p

filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 1048576)

bytes <- human_readable_bytes(1048576)
title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p2 <- p

grid.arrange(p1, p2, ncol = 1)
```
## Thread matters - Server (Size: 16 KB)

```{r server-16KB-thread-comparison, dev = "svg"}
filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 16384)

bytes <- human_readable_bytes(16384)
title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p
```

## Thread matters - Server (Size: 1 MB)

```{r server-1MB-thread-comparison, dev = "svg"}
filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 1048576)

bytes <- human_readable_bytes(1048576)
title <- str_interp(
  "MBps by Server with 100 sockets in a Client (Duration == 30s, Size == ${bytes})"
)
source("./rscripts/plot_filtered_data.R")
p
```

## Thread matters - Client

```{r client-thread-comparison, dev = "svg"}
filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 16384, client_st == TRUE)

bytes <- human_readable_bytes(16384)
title <- str_interp(
  "MBps by Server with 100 sockets in a Client (client: 1 thread, size: ${bytes})"
)
color <- "#F8766D"
source("./rscripts/thread_plot.R")
p1 <- p

filtered_data <- data %>%
  filter(duration == 30, socket_len == 100, size == 16384, client_st == FALSE)

title <- str_interp(
  "MBps by Server with 100 sockets in a Client (client: 8 threads, size: ${bytes})"
)
color <- "#00BFC4"
source("./rscripts/thread_plot.R")
p2 <- p

grid.arrange(p1, p2, ncol = 1)
```

